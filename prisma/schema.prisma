generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WalletType {
  Physical
  Virtual
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id             Int              @id @default(autoincrement())
  userId         Int
  name           String
  phone          String
  BillToPay     BillToPay[]
  BillToReceive BillToReceive[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Wallet {
  id          Int           @id @default(autoincrement())
  userId      Int  
  description String
  balance     Float
  type        WalletType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WalletEntry WalletEntry[]
  WalletExit  WalletExit[]
}

model WalletEntry {
  id               Int                @id @default(autoincrement())
  description      String
  amount           Float
  wallet           Wallet             @relation(fields: [walletId], references: [id])
  walletId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ReceivedPayments ReceivedPayments[]
}

model ReceivedPayments {
  id               Int            @id @default(autoincrement())
  paymentDate      DateTime
  amountReceived   Float
  walletEntry      WalletEntry    @relation(fields: [walletEntryId], references: [id])
  walletEntryId    Int            @unique
  billToReceive   BillToReceive @relation(fields: [billToReceiveId], references: [id])
  billToReceiveId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model BillToReceive {
  id               Int                @id @default(autoincrement())
  description      String
  value            Float
  person           Person             @relation(fields: [personId], references: [id])
  personId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ReceivedPayments ReceivedPayments[]
}

model WalletExit {
  id           Int            @id @default(autoincrement())
  description  String
  amount       Float
  wallet       Wallet         @relation(fields: [walletId], references: [id])
  walletId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PaidPayments PaidPayments[]
}

model PaidPayments {
  id           Int        @id @default(autoincrement())
  paymentDate  DateTime
  amountPaid   Float
  walletExit   WalletExit @relation(fields: [walletExitId], references: [id])
  walletExitId Int        @unique
  billToPay   BillToPay @relation(fields: [billToPayId], references: [id])
  billToPayId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model BillToPay {
  id           Int            @id @default(autoincrement())
  description  String
  value        Float
  person       Person         @relation(fields: [personId], references: [id])
  personId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PaidPayments PaidPayments[]
}

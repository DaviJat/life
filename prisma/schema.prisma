generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MoneyLocationType {
  Physical
  Virtual
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id             Int              @id @default(autoincrement())
  name           String
  phone          String
  BillsToPay     BillsToPay[]
  BillsToReceive BillsToReceive[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model MoneyLocation {
  id          Int               @id @default(autoincrement())
  description String
  type        MoneyLocationType
  Wallets     Wallet[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Wallet {
  id              Int           @id @default(autoincrement())
  amount          Float
  moneyLocation   MoneyLocation @relation(fields: [moneyLocationId], references: [id])
  moneyLocationId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  WalletEntry     WalletEntry[]
  WalletExit      WalletExit[]
}

model WalletEntry {
  id             Int             @id @default(autoincrement())
  description    String
  value          Float
  wallet         Wallet          @relation(fields: [walletId], references: [id])
  walletId       Int             
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  BillsToReceive BillsToReceive[]
}

model WalletExit {
  id          Int         @id @default(autoincrement())
  description String
  value       Float
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  walletId    Int         
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  BillsToPay  BillsToPay[]
}

model BillsToPay {
  id           Int        @id @default(autoincrement())
  description  String
  value        Float
  walletExit   WalletExit @relation(fields: [walletExitId], references: [id])
  walletExitId Int        
  person       Person     @relation(fields: [personId], references: [id])
  personId     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model BillsToReceive {
  id            Int         @id @default(autoincrement())
  description   String
  value         Float
  walletEntry   WalletEntry @relation(fields: [walletEntryId], references: [id])
  walletEntryId Int         
  person        Person      @relation(fields: [personId], references: [id])
  personId      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
